// <auto-generated />
using System;
using EduArk.Infrastructure.Tenant.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduArk.Infrastructure.Tenant.Migrations
{
    [DbContext(typeof(TenantDbContext))]
    [Migration("20230827072213_Edu_Ark_Development_78_1")]
    partial class Edu_Ark_Development_78_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.AcademicLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LevelHeadId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LevelHeadId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("AcademicLevel", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrentYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("AcademicYear", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssessmentType")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Assessment", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Class", b =>
                {
                    b.Property<int>("ClassNameId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("ClassCategory")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageStream")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.ClassName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("ClassName", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.ClassSubjectTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("ClassNameId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectTeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("SubjectTeacherId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.ToTable("ClassSubjectTeacher", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.ClassTeacher", b =>
                {
                    b.Property<int>("ClassNameId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassNameId", "AcademicLevelId", "AcademicYearId", "TeacherId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("ClassTeacher", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.EssayQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Marks")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("EssayQuestion", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Exam", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.ExamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExamType", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.HeadOfDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HeadOfDepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("HeadOfDepartmentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("HeadOfDepartment", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.LearningPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AverageMark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LearningPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentMark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("LearningPlan", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUploadUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LearningPlanId")
                        .HasColumnType("int");

                    b.Property<string>("LessonDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonGrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LessonType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LearningPlanId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Lesson", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.LessonTypeAudio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("LessonType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("LessonTypeAudio", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.LessonTypeText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("LessonType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("LessonTypeText", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.LessonTypeVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("LessonType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("VideoFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("LessonTypeVideo", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.MCQQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Marks")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MCQQuestions", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Semester", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.StructuredQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssessmentId1")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Marks")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId1");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("StructuredQuestion", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Student", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AdmissionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmegencyContactNo1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmegencyContactNo2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionNo")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.StudentClass", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ClassNameId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("StudentId", "ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.HasIndex("ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.ToTable("StudentClass", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.StudentClassSubject", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ClassNameId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ClassNameId", "AcademicLevelId", "AcademicYearId", "SubjectId");

                    b.HasIndex("SubjectId", "AcademicLevelId");

                    b.ToTable("StudentClassSubject", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBuscketSubject")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParentBasketSubject")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentBasketSubjectId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectCategory")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SubjectStreamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasAlternateKey("SubjectCode");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ParentBasketSubjectId");

                    b.HasIndex("SubjectStreamId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.SubjectAcademicLevel", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "AcademicLevelId");

                    b.HasIndex("AcademicLevelId");

                    b.ToTable("SubjectAcademicLevel", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.SubjectStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubjectStream", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.SubjectTargetSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<decimal>("PredictedMark")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TeacherTargetScore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentId");

                    b.ToTable("SubjectTargetSetting", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.SubjectTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("SubjectTeacher", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LearningExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetSecurityToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("UserConfirmationSecutiryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.AcademicLevel", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedAcademicLevels")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "LevelHead")
                        .WithMany("AcademicLevelHeads")
                        .HasForeignKey("LevelHeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedAcademicLevels")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LevelHead");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.AcademicYear", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedAcademicYears")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedAcademicYears")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Assessment", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedAssessments")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Topic", null)
                        .WithMany("Assessments")
                        .HasForeignKey("TopicId");

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedAssessments")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Class", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.AcademicLevel", "AcademicLevel")
                        .WithMany("Classes")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.AcademicYear", "AcademicYear")
                        .WithMany("Classes")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.ClassName", "ClassName")
                        .WithMany("Classes")
                        .HasForeignKey("ClassNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedClasses")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedClasses")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("AcademicYear");

                    b.Navigation("ClassName");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.ClassName", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.ClassSubjectTeacher", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedClassSubjectTeachers")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Subject", "Subject")
                        .WithMany("ClassSubjectTeachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.SubjectTeacher", "SubjectTeacher")
                        .WithMany("ClassSubjectTeachers")
                        .HasForeignKey("SubjectTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedClassSubjectTeachers")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Class", "Class")
                        .WithMany("ClassSubjectTeachers")
                        .HasForeignKey("ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Subject");

                    b.Navigation("SubjectTeacher");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.ClassTeacher", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedClassTeachers")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedClassTeachers")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Class", "Class")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Teacher");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.EssayQuestion", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.Assessment", "Assessment")
                        .WithMany("EssayQuestion")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedEssayQuestions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedEssayQuestions")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Exam", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedExams")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduArk.Domain.Entities.Tenant.ExamType", "ExamType")
                        .WithMany()
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedExams")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ExamType");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.HeadOfDepartment", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.AcademicLevel", "AcademicLevel")
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.AcademicYear", "AcademicYear")
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedHeadOfDepartments")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.HeadOfDepartment", null)
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("HeadOfDepartmentId");

                    b.HasOne("EduArk.Domain.Entities.Tenant.Subject", "Subject")
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.SubjectTeacher", "SubjectTeacher")
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedHeadOfDepartments")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("AcademicYear");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Subject");

                    b.Navigation("SubjectTeacher");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.LearningPlan", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedUserLearningPlans")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedUserLearningPlans")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Lesson", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedUserLessons")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.LearningPlan", null)
                        .WithMany("Lessons")
                        .HasForeignKey("LearningPlanId");

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedUserLessons")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.LessonTypeAudio", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedUserLessonTypeAudios")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Lesson", "Lesson")
                        .WithMany("LessonTypeAudios")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedUserLessonTypeAudios")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Lesson");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.LessonTypeText", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedUserLessonTypeTexts")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Lesson", "Lesson")
                        .WithMany("LessonTypeTexts")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedUserLessonTypeTexts")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Lesson");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.LessonTypeVideo", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedUserLessonVideos")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Lesson", "Lesson")
                        .WithMany("LessonTypeVideos")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedUserLessonVideos")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Lesson");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.MCQQuestions", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.Assessment", "Assessment")
                        .WithMany("MCQQuestions")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedMCQQuestions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedMCQQuestions")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Role", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.StructuredQuestion", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.Assessment", "Assessment")
                        .WithMany("StructuredQuestion")
                        .HasForeignKey("AssessmentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedStructuredQuestions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedStructuredQuestions")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Student", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedStudents")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("EduArk.Domain.Entities.Tenant.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedStudents")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.StudentClass", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.StudentClassSubject", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.SubjectAcademicLevel", "SubjectAcademicLevel")
                        .WithMany("StudentClassSubjects")
                        .HasForeignKey("SubjectId", "AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.StudentClass", "StudentClass")
                        .WithMany("StudentClassSubjects")
                        .HasForeignKey("StudentId", "ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentClass");

                    b.Navigation("SubjectAcademicLevel");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Subject", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedSubjects")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Subject", "PerentSubject")
                        .WithMany("ChildBasketSubjects")
                        .HasForeignKey("ParentBasketSubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduArk.Domain.Entities.Tenant.SubjectStream", "SubjectStream")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectStreamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedSubjects")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("PerentSubject");

                    b.Navigation("SubjectStream");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.SubjectAcademicLevel", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.AcademicLevel", "AcademicLevel")
                        .WithMany("SubjectAcademicLevels")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Subject", "Subject")
                        .WithMany("SubjectAcademicLevels")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.SubjectTargetSetting", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.AcademicLevel", "AcademicLevel")
                        .WithMany("SubjectTargetSettings")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.AcademicYear", "AcademicYear")
                        .WithMany("SubjectTargetSettings")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Semester", "Semester")
                        .WithMany("SubjectTargetSettings")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Student", "Student")
                        .WithMany("SubjectTargetSettings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Subject", "Subject")
                        .WithMany("SubjectTargetSettings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("AcademicYear");

                    b.Navigation("Semester");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.SubjectTeacher", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.AcademicLevel", "AcademicLevel")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.AcademicYear", "AcademicYear")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedSubjectTeachers")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Subject", "Subject")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "Teacher")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedSubjectTeachers")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("AcademicYear");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Topic", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedTopics")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedTopics")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.User", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.UserRole", b =>
                {
                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedUserRoles")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedUserRoles")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduArk.Domain.Entities.Tenant.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.AcademicLevel", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("HeadOfDepartments");

                    b.Navigation("SubjectAcademicLevels");

                    b.Navigation("SubjectTargetSettings");

                    b.Navigation("SubjectTeachers");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.AcademicYear", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("HeadOfDepartments");

                    b.Navigation("SubjectTargetSettings");

                    b.Navigation("SubjectTeachers");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Assessment", b =>
                {
                    b.Navigation("EssayQuestion");

                    b.Navigation("MCQQuestions");

                    b.Navigation("StructuredQuestion");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Class", b =>
                {
                    b.Navigation("ClassSubjectTeachers");

                    b.Navigation("ClassTeachers");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.ClassName", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.HeadOfDepartment", b =>
                {
                    b.Navigation("HeadOfDepartments");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.LearningPlan", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Lesson", b =>
                {
                    b.Navigation("LessonTypeAudios");

                    b.Navigation("LessonTypeTexts");

                    b.Navigation("LessonTypeVideos");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Semester", b =>
                {
                    b.Navigation("SubjectTargetSettings");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Student", b =>
                {
                    b.Navigation("StudentClasses");

                    b.Navigation("SubjectTargetSettings");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.StudentClass", b =>
                {
                    b.Navigation("StudentClassSubjects");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Subject", b =>
                {
                    b.Navigation("ChildBasketSubjects");

                    b.Navigation("ClassSubjectTeachers");

                    b.Navigation("HeadOfDepartments");

                    b.Navigation("SubjectAcademicLevels");

                    b.Navigation("SubjectTargetSettings");

                    b.Navigation("SubjectTeachers");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.SubjectAcademicLevel", b =>
                {
                    b.Navigation("StudentClassSubjects");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.SubjectStream", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.SubjectTeacher", b =>
                {
                    b.Navigation("ClassSubjectTeachers");

                    b.Navigation("HeadOfDepartments");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.Topic", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("EduArk.Domain.Entities.Tenant.User", b =>
                {
                    b.Navigation("AcademicLevelHeads");

                    b.Navigation("CreatedAcademicLevels");

                    b.Navigation("CreatedAcademicYears");

                    b.Navigation("CreatedAssessments");

                    b.Navigation("CreatedClassSubjectTeachers");

                    b.Navigation("CreatedClassTeachers");

                    b.Navigation("CreatedClasses");

                    b.Navigation("CreatedEssayQuestions");

                    b.Navigation("CreatedExams");

                    b.Navigation("CreatedHeadOfDepartments");

                    b.Navigation("CreatedMCQQuestions");

                    b.Navigation("CreatedStructuredQuestions");

                    b.Navigation("CreatedStudents");

                    b.Navigation("CreatedSubjectTeachers");

                    b.Navigation("CreatedSubjects");

                    b.Navigation("CreatedTopics");

                    b.Navigation("CreatedUserLearningPlans");

                    b.Navigation("CreatedUserLessonTypeAudios");

                    b.Navigation("CreatedUserLessonTypeTexts");

                    b.Navigation("CreatedUserLessonVideos");

                    b.Navigation("CreatedUserLessons");

                    b.Navigation("CreatedUserRoles");

                    b.Navigation("CreatedUsers");

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("SubjectTeachers");

                    b.Navigation("UpdatedAcademicLevels");

                    b.Navigation("UpdatedAcademicYears");

                    b.Navigation("UpdatedAssessments");

                    b.Navigation("UpdatedClassSubjectTeachers");

                    b.Navigation("UpdatedClassTeachers");

                    b.Navigation("UpdatedClasses");

                    b.Navigation("UpdatedEssayQuestions");

                    b.Navigation("UpdatedExams");

                    b.Navigation("UpdatedHeadOfDepartments");

                    b.Navigation("UpdatedMCQQuestions");

                    b.Navigation("UpdatedStructuredQuestions");

                    b.Navigation("UpdatedStudents");

                    b.Navigation("UpdatedSubjectTeachers");

                    b.Navigation("UpdatedSubjects");

                    b.Navigation("UpdatedTopics");

                    b.Navigation("UpdatedUserLearningPlans");

                    b.Navigation("UpdatedUserLessonTypeAudios");

                    b.Navigation("UpdatedUserLessonTypeTexts");

                    b.Navigation("UpdatedUserLessonVideos");

                    b.Navigation("UpdatedUserLessons");

                    b.Navigation("UpdatedUserRoles");

                    b.Navigation("UpdatedUsers");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
